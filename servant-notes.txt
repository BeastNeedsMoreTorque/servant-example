
- type level functions ((:>) and (:<|>))
	- TypeOperators extension


- type families (Server and ServerT)

- type level strings
	- proxy type
	- symbolVal :: KnownSymbol n => proxy n -> String


instance (KnownSymbol path, HasServer sublayout) => HasServer (path :> sublayout) where
	type ServerT (path :> sublayout) m = ServerT sublayout m

	route Proxy subserver = StaticRouter $
		M.singleton (toText (symbolVal proxyPath))
					(route proxySublayout subserver)
      where
		proxyPath :: Proxy path
		proxyPath = Proxy

		proxySublayout :: Proxy sublayout
		proxySublayout = Proxy

		toText :: String -> Text
		toText string = cs string

----------------------------------------------------------------------------------------


Servant is a really nice library for building REST APIs in Haskell.  However,
it uses some advanced GHC features which may not be familiar to some Haskell
programmers.  In this article, I explain type-level strings, type-level
functions, and type families.  Finally, I use code from servant-server to
explain how these features are used in practice.

Servant Example
---------------


